26-jun-24

solved target sum (494-lc)

takeaways
-uses knapsack approach


-    vector<vector<int>> dp;
    int solve(int ind, int curr, int target, vector<int> &nums)

        if(ind == nums.size())
        {
            if(curr == target)
            return 1;

            return 0;
        }

        if(dp[ind][curr+1000] != -1)
        return dp[ind][curr+1000];

        // curr+1000
        // if curr = -1000 , then dp[ind][-1000+1000] -> dp[ind][0] -> first index of the array.

        int pos = solve(ind+1, curr+nums[ind], target, nums);
        int neg = solve(ind+1, curr-nums[ind], target, nums);

        return  dp[ind][curr+1000] = pos+neg;


    int findTargetSumWays(vector<int>& nums, int target) 
        dp = vector<vector<int>> (nums.size()+10,vector<int> (2001, -1));
        // target -1000 to 1000 -> 2000

        return solve(0,0,target,nums);

-costraints
-1000 <= target <= 1000

here we use dp[ind][curr+1000] as curr can be from -1000 to 1000 and we need to strore in positive index so we r doing ind+1000;
and we need the size as 2001.